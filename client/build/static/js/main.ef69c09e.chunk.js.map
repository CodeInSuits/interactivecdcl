{"version":3,"sources":["utils/restClient.js","components/ClauseForm.js","components/ClauseNum.js","components/Graph.js","components/ClauseVisualizer.js","App.js","index.js"],"names":["getDotStr","a","async","axios","get","response","data","console","log","postClauses","clauses","post","sendToServer","values","fakeCheckValidClause","name","instance","debounce","Promise","resolve","setTimeout","InputField","React","forwardRef","props","ref","splitFormProps","field","fieldOptions","rest","useField","meta","error","isTouched","isValidating","getInputProps","ClauseForm","useForm","onSubmit","Form","isSubmitting","canSubmit","validate","id","inputs","map","input","key","onClick","onAddInput","type","disabled","className","onPrevClick","onNextClick","Component","Graph","this","dotStr","d3","graphviz","renderDot","setGraph","src","ClauseVisualizer","state","setState","Grid","Row","Col","sm","Button","bsStyle","onEditClauseClick","App","currentStep","newInput","length","prevState","concat","nextStep","prevStep","appendInput","resetStep","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef69c09e.chunk.js","sourcesContent":["import axios from 'axios'\n\n// function that pings server for testing\nexport function pingServer(logMessage) {\n    console.log(logMessage);\n    axios.get('/ping')\n    .then(function (response) {\n        console.log('SUCCESS', response);\n    })\n    .catch(function (error) {\n        console.log('ERROR', error);\n    });\n}\n\n// get a dot string from server for test rendering\nexport async function getDotStr() {\n    try {\n        const response = await axios.get('/dotstr');\n        return response.data.data;\n    }\n    catch (err) {\n        console.log('Error', err)\n    }\n}\n\n// send form data input to server \nexport async function postClauses(clauses) {\n    try {\n        const response = await axios.post('/clauses', clauses);\n        return response;\n    }\n    catch (err) {\n        console.log('Error', err)\n    }\n}\n ","import React from \"react\";\nimport { useForm, useField, splitFormProps } from \"react-form\";\nimport { postClauses } from '../utils/restClient'\n\n// Regex expression for checking valid clauses w/ potential\n// whitespace at beginning or end. Check if it's valid with:\n// `validClause.test({ string clause })`\nlet validClause = /^ *(?:not )?x\\d+(?: or (?:not )?x\\d+)* *$/;\n\nasync function sendToServer(values) {\n    console.log('input is ',values);\n    const response = await postClauses(values);\n    console.log('response is ', response);\n}\n  \nasync function fakeCheckValidClause(name, instance) {\n    if (!name) {\n        return \"A clause is required\";\n    }\n\n    return instance.debounce(async () => {\n        console.log(\"checking clause\");\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        // All names are valid, so return a false error\n        return false;\n    }, 500);\n}\n  \nconst InputField = React.forwardRef((props, ref) => {\n    // Let's use splitFormProps to get form-specific props\n    const [field, fieldOptions, rest] = splitFormProps(props);\n\n    // Use the useField hook with a field and field options\n    // to access field state\n    const {\n        meta: { error, isTouched, isValidating },\n        getInputProps\n    } = useField(field, fieldOptions);\n\n    // Build the field\n    return (\n        <>\n        <input {...getInputProps({ ref, ...rest })} />{\" \"}\n        {isValidating ? (\n            <em>Validating...</em>\n        ) : isTouched && error ? (\n            <em>{error}</em>\n        ) : null}\n        </>\n    );\n});\n\nexport function ClauseForm(props) {\n    // Use the useForm hook to create a form instance\n    const {\n        Form,\n        meta: { isSubmitting, canSubmit }\n    } = useForm({\n        onSubmit: async (values, instance) => {\n            // onSubmit (and everything else in React Form)\n            // has async support out-of-the-box\n            await sendToServer(values);\n            console.log(\"Huzzah!\");\n        },\n        // debugForm: true\n    });\n\n    // TODO: start with 1 clause and make button to add clauses\n    // TODO: define field=\"{}[0-9]+\" as constant since it's also used in app.py\n\n    return (\n        <div>\n            <Form>\n                <div>\n                    <label>\n                    Clause1: <InputField field=\"clause1\" validate={fakeCheckValidClause} />\n                    </label>\n                    <div id=\"dynamicInput\">\n                       {props.inputs.map(input => <label><InputField field={input} key={input} validate={fakeCheckValidClause} /></label>)}\n                   </div>\n                </div>\n                <div>\n                    <button onClick={props.onAddInput}>\n                        +\n                    </button>\n                    <button type=\"submit\" disabled={!canSubmit}>\n                        Submit\n                    </button>\n                </div>\n\n                <div>\n                    <em>{isSubmitting ? \"Submitting...\" : null}</em>\n                </div>\n            </Form>\n            <button className=\"prev-button\" onClick={props.onPrevClick}>Prev Step</button>\n            <button className=\"next-button\" onClick={props.onNextClick}>Next Step</button>\n        </div>    \n    );\n}\n","import React, { Component } from 'react';\nimport '../css/ClauseNum.css';\n\nclass ClauseNum extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      numClauses : 1,\n      nodeColors : ['#494947'],\n      colors : ['#494947', '#35FF69', '#44CCFF', '#7494EA', '#D138BF' ],\n      colorIndex : 0,\n    };\n  }\n\n  adjustNumClauses (increase) {\n    if (increase) {\n      this.setState(prevState => (\n        {\n          nodeColors : [...prevState.nodeColors,\n          prevState.colors[prevState.colorIndex % 4]],\n          colorIndex : prevState.colorIndex + 1,\n          numClauses : prevState.numClauses + 1,\n        })\n      );\n    }\n    else {\n      if (this.state.numClauses >= 1) {\n        this.state.nodeColors.pop();\n        this.setState(prevState => (\n          {\n            nodeColors : prevState.nodeColors,\n            colorIndex : prevState.colorIndex - 1,\n            numClauses : prevState.numClauses - 1,\n          })\n        );\n      }\n    }\n  }\n\n  changeNumClauses (event) {\n    const num = event.target.type === 'number' ? parseInt(event.target.value) : event.target.value;\n    let newNodeColors = [];\n\n    for (let i = 0; i < num; i++) {\n      newNodeColors.push(this.state.colors[i % 4]);\n    }\n\n    this.setState(prevState => (\n      {\n        nodeColors : newNodeColors,\n        colorIndex : num,\n        numClauses : num\n      })\n    );\n    this.setState({ numClauses : event.target.type === 'number' ? parseInt(event.target.value) : event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"graph-input-container\">\n        <h3>Number of clauses</h3>\n        <div className=\"num-clauses-container\">\n          <button disabled={this.state.numClauses===1} className=\"quantity-button\" onClick={() => this.adjustNumClauses(false) }>-</button>\n          <div className=\"quantity\">\n            <input className=\"quantity-input\" type=\"number\" value={this.state.numClauses} onChange={(event) => this.changeNumClauses(event)} readOnly/>\n          </div>\n          <button disabled={this.state.numClauses===20} className=\"quantity-button\" onClick={() => this.adjustNumClauses(true) }>+</button>\n        </div>\n        <div className=\"node-container\">\n          { this.state.nodeColors.map((color, index) => {\n            return <div className=\"node\" style={{ backgroundColor : color }}>\n                X<sub>{ index + 1 }</sub>\n              </div>\n          }) }\n        </div>\n        <button className=\"next-button\" onClick={this.props.onNextClick}>Next Step</button>\n      </div>\n    );\n  }\n}\n\nexport default ClauseNum;","import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport * as d3Graphviz from 'd3-graphviz';\n\nclass Graph extends Component {\n\n  constructor(props){\n    super(props);\n  }\n  \n  setGraph() {\n    console.log('In Graph component DOT source =', this.props.dotStr);\n    d3.select(\".graph\").graphviz().renderDot(this.props.dotStr);\n  }\n\n  componentDidUpdate() {\n      this.setGraph();\n  }\n\n  render() {\n    return (\n        <div className=\"graph\">\n            <script src=\"https://unpkg.com/viz.js@1.8.0/viz.js\" type=\"javascript/worker\"></script>\n        </div>\n    );\n  }\n}\n\nexport default Graph;","import React, { Component } from 'react';\nimport { getDotStr } from '../utils/restClient';\nimport Graph from './Graph';\nimport { Button, Grid, Row, Col } from 'react-bootstrap';\n\n\nclass ClauseVisualizer extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      dotStr: '',\n    };\n  }\n  \n  async setGraph() {\n    const dotStr = await getDotStr();\n    console.log('DOT source =', dotStr);\n    this.setState({dotStr})\n    console.log(this.state.dotStr)\n  }\n\n  render() {\n      return (\n        <Grid className=\"App\">\n            <Row>\n            <Col sm={3}>\n                <Button bsStyle=\"primary\" onClick={this.props.onEditClauseClick}>\n                Edit clause\n                </Button>\n            </Col>\n            <Col sm={9}>\n                <Graph\n                dotStr={this.state.dotStr}\n                />\n                { this.state.dotStr && <div className=\"graph-steps-container\">\n                <div>\n                    <Button bsStyle=\"primary\">\n                    Prev step\n                    </Button>\n                </div>\n                <div>\n                    <Button bsStyle=\"primary\">\n                    Step\n                    </Button>\n                </div>\n                </div> }\n            </Col>\n            </Row>\n            <Button className=\"square\" onClick={() => this.setGraph()}>\n            {'Click me'}\n            </Button>\n        </Grid>\n      );\n  }\n}\n\nexport default ClauseVisualizer;","import React, { Component } from 'react';\nimport './App.css';\nimport { ClauseForm } from './components/ClauseForm';\nimport ClauseNum from './components/ClauseNum';\nimport ClauseVisualizer from './components/ClauseVisualizer';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      currentStep: 0,\n      inputs: []\n    };\n  }\n\n  nextStep() {\n    this.setState({currentStep: this.state.currentStep+1});\n  }\n\n  prevStep() {\n    this.setState({currentStep: this.state.currentStep-1});\n  }\n\n  resetStep() {\n    this.setState({currentStep: 0});\n  }\n\n  appendInput() {\n    var newInput = `clause${this.state.inputs.length+2}`;\n    this.setState(prevState => ({ inputs: prevState.inputs.concat([newInput]) }));\n  }\n\n  // removeInput(inputToRemove) {\n  //   this.setState(prevState => ({ inputs: prevState.inputs.concat([newInput]) }));\n  // }\n\n  render() {\n    return (\n      <div className=\"graph-input-wrapper\">\n        {/* { this.state.currentStep === 0 && <ClauseNum onNextClick={() => this.nextStep()}/> } */}\n        { this.state.currentStep === 0 && \n          <ClauseForm \n            onNextClick={() => this.nextStep()} \n            onPrevClick={() => this.prevStep()} \n            inputs={this.state.inputs}\n            onAddInput={() => this.appendInput()}\n          /> \n        }\n        { this.state.currentStep === 1 && <ClauseVisualizer onEditClauseClick={() => this.resetStep()}/> }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}