{"version":3,"sources":["components/ClauseForm.js","components/Graph.js","components/ClauseVisualizer.js","utils/restClient.js","App.js","index.js"],"names":["validClause","fakeCheckValidClause","value","instance","a","async","debounce","test","InputField","props","splitFormProps","field","fieldOptions","rest","useField","meta","error","isTouched","isValidating","getInputProps","ClauseForm","useForm","onSubmit","values","Form","isSubmitting","canSubmit","className","placeholder","validate","inputs","map","input","index","key","type","onClick","onDeleteInput","onAddInput","disabled","Graph","console","log","this","dotStr","d3","graphviz","renderDot","setGraph","src","Component","ClauseVisualizer","state","clauseStrs","clauseInfo","data","clauses","graphStrs","graphs","graphIndex","setState","prevState","Object","entries","Button","bsStyle","onResetClauseClick","prevDotStr","nextDotStr","length","postClauses","axios","post","response","App","currentStep","inputIndex","serverResponse","parsedValues","clauseIndex","i","newInput","concat","toDelete","inputsToUpdate","indexToDelete","indexOf","splice","parseForm","visualizeClauses","alert","appendInput","deleteInput","resetClauses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.255998f0.chunk.js","sourcesContent":["import React from \"react\";\nimport '../css/ClauseForm.css';\nimport { useForm, useField, splitFormProps } from \"react-form\";\n\n// Regex expression for checking valid clauses w/ potential\n// whitespace at beginning or end. Check if it's valid with:\n// `validClause.test({ string clause })`\nconst validClause = /^ *(?:not )?x\\d+(?: or (?:not )?x\\d+)* *$/;\n\n\n  \nasync function fakeCheckValidClause(value, instance) {\n    if(!value) {\n        return \"A clause is required\";\n    }\n\n    return instance.debounce(() => {\n        if(validClause.test(value)) {\n            // All names are valid, so return a false error\n            return false;\n        }\n        else {\n            return \"Make sure to use all lower case letters, all your variables begin with x, and since it's CNF form, you can only use 'not' and 'or' in your clauses\";\n        }   \n    }, 500);\n}\n  \nfunction InputField(props) {\n    // Let's use splitFormProps to get form-specific props\n    const [field, fieldOptions, rest] = splitFormProps(props);\n\n    // Use the useField hook with a field and field options\n    // to access field state\n    const {\n        meta: { error, isTouched, isValidating },\n        getInputProps\n    } = useField(field, fieldOptions);\n\n    // Build the field\n    return (\n        <>\n        <input {...getInputProps({...rest})} />{\" \"}\n        {isValidating ? (\n            <em>Validating...</em>\n        ) : isTouched && error ? (\n            <em>{error}</em>\n        ) : null}\n        </>\n    );\n}\n\nexport function ClauseForm(props) {\n    // Use the useForm hook to create a form instance\n    const {\n        Form,\n        meta: { isSubmitting, canSubmit }\n    } = useForm({\n        onSubmit: async (values, instance) => {\n            // onSubmit (and everything else in React Form)\n            // has async support out-of-the-box\n            props.onSubmit(values);\n        },\n        // debugForm: true\n    });\n\n    const inputPlaceHolder = 'e.g. x1 or not x2 or x5'\n\n    // TODO: start with 1 clause and make button to add clauses\n    // TODO: define field=\"{}[0-9]+\" as constant since it's also used in app.py\n\n    return (\n        <div className=\"graph-input-container\">\n            <Form className=\"form-clauses-container\">\n                <div>\n                    <label>\n                        Clause 1: <InputField placeholder={inputPlaceHolder} field=\"clause1\" validate={fakeCheckValidClause} />\n                    </label>\n                    <div className=\"dynamic-inputs\">\n                       {props.inputs.map((input, index) => \n                            <label key={input}>\n                                Clause {index+2}:&nbsp;\n                                <InputField placeholder={inputPlaceHolder} field={input} key={input} validate={fakeCheckValidClause} />\n                                <button type=\"button\" onClick={() => props.onDeleteInput(input)}>x</button>\n                            </label>\n                        )}\n                   </div>\n                </div>\n                <div className=\"add-input\">\n                    <button type=\"button\" className=\"add-button\" onClick={props.onAddInput}>\n                        +\n                    </button>\n                </div>\n                <div className=\"submit-form\">\n                    <button className=\"submit-button\" type=\"submit\" disabled={!canSubmit}>\n                        Submit\n                    </button>\n                    <div>\n                        <em>{isSubmitting ? \"Submitting...\" : null}</em>\n                    </div>\n                </div>\n            </Form>\n        </div> \n    );\n}\n","import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport * as d3Graphviz from 'd3-graphviz';\n\nclass Graph extends Component {\n\n  constructor(props){\n    super(props);\n  }\n  \n  setGraph() {\n    console.log('In Graph component DOT source =', this.props.dotStr);\n    d3.select(\".graph\").graphviz().renderDot(this.props.dotStr);\n  }\n  componentDidMount() {\n    this.setGraph();\n  }\n  componentDidUpdate() {\n    this.setGraph();\n  }\n\n  render() {\n    return (\n        <div className=\"graph\">\n            <script src=\"https://unpkg.com/viz.js@1.8.0/viz.js\" type=\"javascript/worker\"></script>\n        </div>\n    );\n  }\n}\n\nexport default Graph;","import React, { Component } from 'react';\nimport Graph from './Graph';\nimport { Button } from 'react-bootstrap';\nimport '../css/ClauseVisualizer.css';\n\n\nclass ClauseVisualizer extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      clauseStrs: props.clauseInfo.data.clauses,\n      graphStrs: props.clauseInfo.data.graphs,\n      graphIndex: 0\n    };\n  }\n\n  prevDotStr() {\n    this.setState(prevState => ({ \n      graphIndex: prevState.graphIndex - 1\n    }));\n  }\n\n  nextDotStr() {\n    this.setState(prevState => ({ \n      graphIndex: prevState.graphIndex + 1\n    }));\n  }\n\n  render() {\n      return (\n        <div className=\"clause-visualizer\">\n          <div className=\"edit-clauses-wrapper\">\n            <div className=\"edit-clauses-container\">\n              <div className=\"clause-strs\">\n                {Object.entries(this.state.clauseStrs).map(([key, value]) => \n                  <div key={key}>\n                    <label>{key}</label>&nbsp;&nbsp;&nbsp;\n                    <label>{value}</label>\n                  </div>\n                )}\n              </div>\n              <Button bsStyle=\"primary\" onClick={this.props.onResetClauseClick}>\n                Reset clause\n              </Button>\n            </div>\n          </div>\n          <div className=\"graph-wrapper\">\n            <div className=\"graph-container\">\n              <Graph\n                dotStr={this.state.graphStrs[this.state.graphIndex]}\n              />\n              <div className=\"graph-steps-container\">\n                <div className=\"button-container\">\n                  <div>\n                    <Button bsStyle=\"primary\" onClick={() => this.prevDotStr()} disabled={this.state.graphIndex===0}>\n                      Prev step\n                    </Button>\n                  </div>\n                  <div>\n                    <Button bsStyle=\"primary\" onClick={() => this.nextDotStr()} disabled={this.state.graphIndex===(this.state.graphStrs.length-1)}>\n                      Next step\n                    </Button>\n                  </div>\n                </div>\n              </div> \n            </div>\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default ClauseVisualizer;","import axios from 'axios'\n\n// function that pings server for testing\nexport function pingServer(logMessage) {\n    console.log(logMessage);\n    axios.get('/ping')\n    .then(function (response) {\n        console.log('SUCCESS', response);\n    })\n    .catch(function (error) {\n        console.log('ERROR', error);\n    });\n}\n\n// get a dot string from server for test rendering\nexport async function getDotStr() {\n    try {\n        const response = await axios.get('/dotstr');\n        return response.data.data;\n    }\n    catch (err) {\n        console.log('Error', err)\n    }\n}\n\n// send form data input to server \nexport async function postClauses(clauses) {\n    try {\n        const response = await axios.post('/clauses', clauses);\n        return response;\n    }\n    catch (err) {\n        console.log('Error', err)\n    }\n}\n ","import React, { Component } from 'react';\nimport './App.css';\nimport { ClauseForm } from './components/ClauseForm';\n// import ClauseNum from './components/ClauseNum';\nimport ClauseVisualizer from './components/ClauseVisualizer';\nimport { postClauses } from './utils/restClient';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      currentStep: 0,\n      inputs: [],\n      inputIndex: 2,\n      serverResponse: null,\n    };\n  }\n\n  parseForm(values) {\n    let parsedValues = {};\n    parsedValues['clause1'] = values['clause1'];\n    let clauseIndex = 2;\n\n    for (let i = 0; i < this.state.inputs.length; i++)\n    {\n      let input = this.state.inputs[i];\n\n      if (values[input])\n      {\n        parsedValues[`clause${clauseIndex++}`] = values[input];\n      }\n    }\n\n    return parsedValues;\n  }\n\n  visualizeClauses(serverResponse) {\n    this.setState({\n      currentStep: this.state.currentStep+1,\n      serverResponse\n    });\n  }\n\n  resetClauses() {\n    this.setState({\n      currentStep: 0,\n      inputs: [],\n      inputIndex: 2,\n      serverResponse: null\n    });\n  }\n\n  appendInput() {\n    var newInput = `clause${this.state.inputIndex}`;\n    this.setState(prevState => ({ \n      inputs: prevState.inputs.concat([newInput]),\n      inputIndex: prevState.inputIndex+1\n    }));\n  }\n\n  deleteInput(toDelete) {\n    const inputsToUpdate = [...this.state.inputs];\n    const indexToDelete = inputsToUpdate.indexOf(toDelete);\n    if (indexToDelete > -1) {\n      inputsToUpdate.splice(indexToDelete, 1);\n    }\n    this.setState({inputs: inputsToUpdate});\n  }\n\n  async onSubmit(values) {\n    const response = await postClauses(this.parseForm(values));\n    if(response) {\n      console.log(response)\n      this.visualizeClauses(response);\n    }\n    else{\n      alert(\"Server failed to give a response. Please try different clauses\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"graph-input-wrapper\">\n        {/* { this.state.currentStep === 0 && <ClauseNum onNextClick={() => this.nextStep()}/> } */}\n        { this.state.currentStep === 0 && \n          <ClauseForm \n            inputs={this.state.inputs}\n            onAddInput={() => this.appendInput()}\n            onDeleteInput={toDelete => this.deleteInput(toDelete)}\n            onSubmit={values => this.onSubmit(values)}\n          /> \n        }\n        { this.state.currentStep === 1 && !!this.state.serverResponse &&\n          <ClauseVisualizer \n            clauseInfo={this.state.serverResponse}\n            onResetClauseClick={() => this.resetClauses()}\n          /> \n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}