{"version":3,"sources":["components/terminal-window/TypingText.js","components/terminal-window/CommandLineText.js","components/terminal-window/TerminalWindow.js","components/ClauseForm.js","components/ClauseGraph.js","components/ClauseVisualizer.js","utils/restClient.js","App.js","index.js"],"names":["TypingText","props","state","typedText","fullText","text","index","timeOuts","textRef","React","createRef","typingText","bind","showFullText","this","document","addEventListener","current","scrollIntoView","removeEventListener","length","setState","prevState","charAt","setTimeout","doneTyping","event","keyCode","i","window","clearTimeout","className","ref","split","map","key","Component","CommandLineText","userInput","userInputRef","getUserInput","handleUserInput","focus","charCode","preventDefault","blur","innerHTML","prompt","style","position","display","contentEditable","blink","onKeyPress","TerminalWindow","prompts","validateUserInput","value","parsedValue","trim","command","toLowerCase","JSON","stringify","clauses","submitClauses","clause","slice","join","replace","test","addClause","toDelete","clauseToDelete","deleteClause","ClauseForm","clauseNum","inputs","updatedInputs","Object","assign","reorderClauses","fromEntries","values","onSubmit","ClauseGraph","graphviz","renderDot","dotStr","d3","transition","ease","delay","duration","on","setGraph","src","type","ClauseVisualizer","clauseStrs","clauseInfo","data","graphStrs","stepGraphs","contIndices","confClauses","isSat","graphIndex","conflictClauses","conflictIndex","push","Label","bsStyle","Well","bsSize","resetButtonTooltip","Tooltip","id","prevButtonTooltip","prevContButtonTooltip","nextButtonTooltip","nextContButtonTooltip","resultPopover","Popover","title","adjustConflictClauses","entries","OverlayTrigger","placement","overlay","Button","onClick","onResetClauseClick","prevContinue","disabled","prevStep","trigger","nextStep","nextContinue","postClauses","a","async","axios","post","response","App","currentStep","serverResponse","inputIndex","status","visualizeClauses","alert","error","resetClauses","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.62cda948.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TypingText extends Component {\n  constructor (props){\n    super(props);\n    this.state = {\n      typedText : '',\n      fullText : this.props.text,\n      index : 0,\n      timeOuts : [],\n    };\n    this.textRef = React.createRef();\n    this.typingText = this.typingText.bind(this);\n    this.showFullText = this.showFullText.bind(this);\n  }\n\n  componentDidMount () {\n    this.typingText();\n    document.addEventListener('keydown', this.showFullText);\n  }\n\n  componentDidUpdate () {\n    this.textRef.current.scrollIntoView();\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.showFullText);\n  }\n\n  typingText () {\n    if (this.state.index < this.props.text.length) {\n      this.setState(prevState => (\n        {\n          typedText : prevState.typedText + prevState.fullText.charAt(prevState.index),\n          index : prevState.index + 1\n        })\n      );\n      this.setState(prevState => (\n        {\n          timeOuts : [...prevState.timeOuts, setTimeout(this.typingText, 20)],\n        })\n      );\n    }\n    else {\n      setTimeout(this.props.doneTyping, 20);\n    }\n  }\n\n  showFullText (event) {\n    if (event.keyCode === 13) {\n      for (let i = 0; i < this.state.timeOuts.length; i++) {\n        window.clearTimeout(this.state.timeOuts[i]);\n      }\n      this.setState({ typedText : this.state.fullText });\n      setTimeout(this.props.doneTyping, 20);\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"typing-text\" ref={this.textRef}>\n        { this.state.typedText && this.state.typedText.split('\\n').map((text, index) =>\n          {\n            return <div className=\"text\" key={index}>{ text }</div>\n          }\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TypingText;","import React, { Component } from 'react';\nimport TypingText from './TypingText';\nimport '../../css/terminal-window/CommandLineText.css';\n\nclass CommandLineText extends Component {\n  constructor (props){\n    super(props);\n    this.state = {\n      userInput : false,\n    };\n    this.userInputRef = React.createRef();\n    this.getUserInput = this.getUserInput.bind(this);\n    this.handleUserInput = this.handleUserInput.bind(this);\n  }\n\n  getUserInput () {\n    this.setState({ userInput : true });\n    this.userInputRef.current.focus();\n  }\n\n  handleUserInput (event) {\n    if (event.charCode === 13) {\n      event.preventDefault();\n      this.userInputRef.current.blur();\n      this.props.handleUserInput(this.userInputRef.current.innerHTML);\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"command-line-text\">\n        <TypingText\n          text={this.props.prompt}\n          doneTyping={this.getUserInput}\n        />\n        {this.state.userInput &&\n          <div style={{ position : 'relative' }}>\n            <div style={{ position : 'absolute', display : 'inline-block'}}>\n              >\n            </div>\n            <div\n              className=\"command-line-user-input\"\n              contentEditable={this.props.blink}\n              onKeyPress={this.handleUserInput}\n              ref={this.userInputRef}>\n            </div>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default CommandLineText;","import React, { Component } from \"react\";\nimport \"../../css/terminal-window/TerminalWindow.css\";\nimport CommandLineText from './CommandLineText';\n\nclass TerminalWindow extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      prompts : [`Welcome to Interactive CDCL!\n      \\n\n      To skip introduction/text animation, press Enter key.\n      \\n\n      To add a clause, type 'add [CLAUSE]' (e.g. add x1 or not x2 or x5).\n      \\n\n      To remove a clause, type 'del [CLAUSE_LABEL]' (e.g. del clause3). Note clauses will be reordered after deletion.\n      \\n\n      To list current clauses you have, type 'list'.\n      \\n\n      Once you're done, type 'run' to compute current clauses and visualize the implication graph.\n      \\n\n      If you need help, type 'help'.`],\n    }\n    this.validateUserInput = this.validateUserInput.bind(this);\n  }\n\n  validateUserInput (value) {\n    const validClause = /^ *(?:not )?x\\d+(?: or (?:not )?x\\d+)* *$/;\n    const parsedValue = value.trim().split(/\\s+/);\n    const command = parsedValue[0].toLowerCase();\n\n    if (value.trim().toLowerCase() === 'run') {\n      if (JSON.stringify(this.props.clauses) === '{}') {\n        this.setState(prevState => ({ prompts : [...prevState.prompts, \"Can't build a graph with zero clauses.\"] }));\n      }\n      else {\n        this.props.submitClauses();\n      }\n    }\n\n    else if (command === 'add') {\n      const clauses = parsedValue.slice(1);\n      const clause = clauses.join(' ');\n\n      // console.log(clause)\n\n\n      if (!clause || clause.replace(/\\s/g, '').length === 0) {\n        this.setState(prevState => ({ prompts : [...prevState.prompts, \"Clause input field cannot be empty!\"] }));\n      }\n      else {\n        if (validClause.test(clause)) {\n          this.setState(prevState => ({ prompts : [...prevState.prompts, `Clause '${clause}' added!`] }));\n          this.props.addClause(clause);\n        }\n        else {\n            this.setState(prevState => ({ prompts : [...prevState.prompts, \"Make sure to use all lower case letters, all your variables begin with x, end with a positive integer and since it's CNF form, you can only use 'not' and 'or' in your clauses!\"] }));\n        }\n      }\n    }\n\n    else if (command === 'del') {\n      let toDelete = parsedValue[1];\n      if (toDelete) {\n        if (this.props.clauses[toDelete]) {\n          const clauseToDelete = this.props.clauses[toDelete];\n          this.props.deleteClause(toDelete);\n          this.setState(prevState => ({ prompts : [...prevState.prompts, `Clause ${clauseToDelete} has been deleted! Your current clauses have been reordered.`] }));\n        }\n        else {\n          this.setState(prevState => ({ prompts : [...prevState.prompts, \"Invalid clause label. Use command 'list' to check available clause label you have.\"] }));\n        }\n      }\n      else {\n        this.setState(prevState => ({ prompts : [...prevState.prompts, \"Invalid delete clause command. You need to specify a clause label(e.g. del clause3).\"] }));\n      }\n    }\n\n    else if (value.trim().toLowerCase() === 'list') {\n      this.setState(prevState => ({ prompts : [...prevState.prompts, JSON.stringify(this.props.clauses)] }));\n    }\n\n    else if (value.trim().toLowerCase() === 'help') {\n      const helpInfo = `To skip text animation, press Enter key.\n      \\n\n      To add a clause, type 'add [CLAUSE]' (e.g. add x1 or not x2 or x5).\n      \\n\n      To remove a clause, type 'del [CLAUSE_LABEL]' (e.g. del clause3). Note clauses will be reordered after deletion.\n      \\n\n      To list current clauses you have, type 'list'.\n      \\n\n      Once you're done, type 'run' to compute current clauses and visualize the implication graph.\n      \\n\n      If you need help, type 'help'.`;\n      this.setState(prevState => ({ prompts : [...prevState.prompts, helpInfo] }));\n    }\n\n    else {\n      this.setState(prevState => ({ prompts : [...prevState.prompts, \"Invalid command. Type 'help' to see your available options.\"] }));\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"terminal-window-container\">\n        <div className=\"terminal-window-header\">\n            <div className=\"title\">\n                Interactive CDCL\n            </div>\n        </div>\n        <div className=\"terminal-window\">\n            {this.state.prompts.map((prompt, index) =>\n              <CommandLineText\n                key={`prompt-${index}`}\n                prompt={prompt}\n                blink={index === this.state.prompts.length - 1}\n                handleUserInput={this.validateUserInput}\n              />\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TerminalWindow;","import React, { Component } from \"react\";\nimport '../css/ClauseForm.css';\nimport TerminalWindow from './terminal-window/TerminalWindow';\n\nclass ClauseForm extends Component {\n    constructor (props){\n        super(props);\n        this.state = {\n            clauseNum : 1,\n            inputs    : {},\n        };\n        this.addClause = this.addClause.bind(this);\n        this.deleteClause = this.deleteClause.bind(this);\n    }\n\n    addClause (clause) {\n        this.setState(prevState => (\n            {\n                inputs : { ...prevState.inputs, [`clause${prevState.clauseNum}`] : clause },\n                clauseNum : prevState.clauseNum + 1\n            }\n        ));\n    }\n\n    deleteClause (clause) {\n        let updatedInputs = Object.assign({}, this.state.inputs);\n        delete updatedInputs[clause];\n        updatedInputs = this.reorderClauses(updatedInputs);\n        \n        this.setState(prevState => (\n            {\n                inputs : updatedInputs,\n                clauseNum : prevState.clauseNum - 1\n            }\n        ));\n    }\n\n    reorderClauses(clauses) {\n        const reorderedClauses = Object.fromEntries(Object.values(clauses).map((clause, index) => [`clause${index+1}`, clause]));\n        return reorderedClauses;\n    }\n\n    render () {\n        return (\n            <div className=\"graph-input-container\">\n                <TerminalWindow\n                    clauses={this.state.inputs}\n                    addClause={this.addClause}\n                    deleteClause={this.deleteClause}\n                    submitClauses={() => this.props.onSubmit(this.state.inputs)}\n                />\n            </div> \n        )\n    };\n}\n\nexport default ClauseForm;","import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport * as d3Graphviz from 'd3-graphviz';\n\nclass ClauseGraph extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      graphviz: null\n    }\n  }\n  \n  setGraph() {\n    // console.log('In Graph component DOT source =', this.props.dotStr);\n    this.state.graphviz.renderDot(this.props.dotStr);\n  }\n  componentDidMount() {\n    const graphviz = d3.select(\".graph\").graphviz()\n          .transition(\n            () => d3.transition(\"main\")\n            .ease(d3.easeLinear)\n            .delay(500)\n            .duration(500)\n          )\n          .on(\"initEnd\", this.setGraph);\n    this.setState({graphviz})\n  }\n\n  componentDidUpdate() {\n    this.setGraph();\n  }\n\n  render() {\n    return (\n        <div className=\"graph\">\n            <script src=\"https://unpkg.com/viz.js@1.8.0/viz.js\" type=\"javascript/worker\"></script>\n        </div>\n    );\n  }\n}\n\nexport default ClauseGraph;","import React, { Component } from 'react';\nimport ClauseGraph from './ClauseGraph';\nimport { Button, Tooltip, Popover, OverlayTrigger, Well, Label } from 'react-bootstrap';\nimport '../css/ClauseVisualizer.css';\n\n\nclass ClauseVisualizer extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      clauseStrs: props.clauseInfo.data.clauses,\n      graphStrs: props.clauseInfo.data.stepGraphs,\n      contIndices: props.clauseInfo.data.contIndices,\n      confClauses: props.clauseInfo.data.confClauses,\n      isSat: props.clauseInfo.data.isSat,\n      graphIndex: 0\n    };\n  }\n\n  prevStep() {\n    this.setState(prevState => ({ \n      graphIndex: prevState.graphIndex - 1\n    }));\n  }\n\n  nextStep() {\n    this.setState(prevState => ({ \n      graphIndex: prevState.graphIndex + 1\n    }));\n  }\n\n  adjustConflictClauses() {\n    let conflictClauses = [];\n    let conflictIndex = 0;\n    for (let i = 0; i < this.state.contIndices.length-1; i++) {\n      if (this.state.contIndices[i]<=this.state.graphIndex) {\n        conflictClauses.push(\n          <div className=\"conflict-clause\" key={`conflict${conflictIndex}`}>\n            <Label bsStyle=\"warning\">{`conflict${conflictIndex+1}`}</Label>\n            <Well bsSize=\"small\">{this.state.confClauses[conflictIndex]}</Well>\n          </div>\n        );\n        conflictIndex++\n      }\n    }\n    return conflictClauses;\n  }\n\n  prevContinue() {\n    for (let i = this.state.contIndices.length-1; i >= 0; i--) {\n      if (this.state.contIndices[i]<this.state.graphIndex) {\n        // console.log(\"prev continue to step \" + this.state.contIndices[i]);\n        this.setState({graphIndex: this.state.contIndices[i]});\n        return;\n      }\n    }\n  }\n\n  nextContinue() {\n    for (let i = 0; i < this.state.contIndices.length; i++) {\n      if (this.state.contIndices[i]>this.state.graphIndex) {\n        // console.log(\"next continue to step \" + this.state.contIndices[i]);\n        this.setState({graphIndex: this.state.contIndices[i]});\n        return;\n      }\n    }\n  }\n\n  render() {\n    const resetButtonTooltip = (\n      <Tooltip id=\"resetButtonTooltip\">\n        Reset all clauses.<strong>Proceed with caution!</strong>\n      </Tooltip>\n    );\n    const prevButtonTooltip = (\n      <Tooltip id=\"prevButtonTooltip\">\n        Go to previous decision diagram.\n      </Tooltip>\n    );\n    const prevContButtonTooltip = (\n      <Tooltip id=\"prevContButtonTooltip\">\n        Go to previous conflict level.\n      </Tooltip>\n    );\n    const nextButtonTooltip = (\n      <Tooltip id=\"nextButtonTooltip\">\n        Go to next decision diagram.\n      </Tooltip>\n    );\n    const nextContButtonTooltip = (\n      <Tooltip id=\"nextContButtonTooltip\">\n        Go to next conflict level.\n      </Tooltip>\n    );\n    const resultPopover = (\n      <Popover id=\"resultButtonTooltip\" title=\"Solver Result\">\n        {`These CNF clauses have a result of ${this.state.isSat ? \"SAT\" : \"UNSAT\"}`}\n      </Popover>\n    );\n    return (\n      <div className=\"clause-visualizer\">\n        <div className=\"clause-strs-wrapper\">\n          <div className=\"clause-strs-container\">\n            <div className=\"clause-strs\">\n              {this.adjustConflictClauses()}\n              {Object.entries(this.state.clauseStrs).map(([key, value]) => \n                <div className=\"clause-pair\" key={key}>\n                  <Label bsStyle=\"info\">{key}</Label>\n                  <Well bsSize=\"small\">{value}</Well>\n                </div>\n              )}\n            </div>\n            <div className=\"clause-strs-button-container\">\n              <OverlayTrigger placement=\"top\" overlay={resetButtonTooltip}>\n                <Button \n                  bsStyle=\"primary\" \n                  onClick={this.props.onResetClauseClick}>\n                  Reset clause\n                </Button>\n              </OverlayTrigger>\n            </div>\n          </div>\n        </div>\n        <div className=\"graph-wrapper\">\n          <div className=\"graph-container\">\n            <ClauseGraph \n              className=\"graph\"\n              dotStr={this.state.graphStrs[this.state.graphIndex]}\n            />\n            <div className=\"graph-button-container\">    \n              <div>\n                <OverlayTrigger placement=\"top\" overlay={prevContButtonTooltip}>\n                  <Button \n                    bsStyle=\"primary\" \n                    onClick={() => this.prevContinue()}\n                    disabled={this.state.graphIndex<=this.state.contIndices[0]}>\n                    {'<< Prev Continue'}\n                  </Button>\n                </OverlayTrigger>\n              </div>\n              <div>\n                <OverlayTrigger placement=\"top\" overlay={prevButtonTooltip}>\n                  <Button \n                    bsStyle=\"primary\" \n                    onClick={() => this.prevStep()} \n                    disabled={this.state.graphIndex===0}>\n                    {'< Prev Step'}\n                  </Button>\n                </OverlayTrigger>\n              </div>\n              <div>\n                <OverlayTrigger placement=\"top\" trigger=\"click\" overlay={resultPopover}>\n                  <Button bsStyle=\"primary\">\n                    {'Reveal Result'}\n                  </Button>\n                </OverlayTrigger>\n              </div>\n              <div>\n                <OverlayTrigger placement=\"top\" overlay={nextButtonTooltip}>\n                  <Button \n                    bsStyle=\"primary\" \n                    onClick={() => this.nextStep()} \n                    disabled={this.state.graphIndex===(this.state.graphStrs.length-1)}>\n                    {'Next Step >'}\n                  </Button>\n                </OverlayTrigger>\n              </div>\n              <div>\n                <OverlayTrigger placement=\"top\" overlay={nextContButtonTooltip}>\n                  <Button \n                    bsStyle=\"primary\" \n                    onClick={() => this.nextContinue()} \n                    disabled={this.state.graphIndex>=this.state.contIndices[this.state.contIndices.length-1]}>\n                    {'Next Continue >>'}\n                  </Button>\n                </OverlayTrigger>          \n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ClauseVisualizer;","import axios from 'axios'\n\n// function that pings server for testing\nexport function pingServer(logMessage) {\n    // console.log(logMessage);\n    axios.get('/ping')\n    .then(function (response) {\n        // console.log('SUCCESS', response);\n    })\n    .catch(function (error) {\n        // console.log('ERROR', error);\n    });\n}\n\n// get a dot string from server for test rendering\nexport async function getDotStr() {\n    try {\n        const response = await axios.get('/dotstr');\n        return response.data.data;\n    }\n    catch (err) {\n        // console.log('Error', err)\n    }\n}\n\n// send form data input to server \nexport async function postClauses(clauses) {\n    try {\n        const response = await axios.post('/clauses', clauses);\n        return response;\n    }\n    catch (err) {\n        // console.log('Error', err)\n    }\n}\n ","import React, { Component } from 'react';\nimport './App.css';\nimport ClauseForm from './components/ClauseForm';\n// import ClauseNum from './components/ClauseNum';\nimport ClauseVisualizer from './components/ClauseVisualizer';\nimport { postClauses } from './utils/restClient';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      currentStep: 0,\n      serverResponse: null,\n    };\n  }\n\n  visualizeClauses(serverResponse) {\n    this.setState({\n      currentStep: this.state.currentStep+1,\n      serverResponse\n    });\n  }\n\n  resetClauses() {\n    this.setState({\n      currentStep: 0,\n      inputs: ['clause1'],\n      inputIndex: 2,\n      serverResponse: null\n    });\n  }\n\n  handleUserInput (userInput) {\n    // console.log(userInput)\n  }\n\n  async onSubmit(values) {\n    const response = await postClauses(values);\n    // const response = await postClauses(this.parseForm(values));\n    if(response.data.status==='success') {\n      // console.log(response)\n      this.visualizeClauses(response);\n    }\n    else{\n      alert(\"Server failed to give a response with an error message: \" + response.data.error + \". Please try different clauses!\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"graph-input-wrapper\">\n        {/* { this.state.currentStep === 0 && <ClauseNum onNextClick={() => this.nextStep()}/> } */}\n        { this.state.currentStep === 0 && \n          <ClauseForm\n            onSubmit={values => this.onSubmit(values)}\n          /> \n        }\n        { this.state.currentStep === 1 && !!this.state.serverResponse &&\n          <ClauseVisualizer \n            clauseInfo={this.state.serverResponse}\n            onResetClauseClick={() => this.resetClauses()}\n          /> \n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}